=head2 guestfs_add_cdrom

 int guestfs_add_cdrom (guestfs_h *handle,
		const char *filename);

This function adds a virtual CD-ROM disk image to the guest.

This is equivalent to the qemu parameter C<-cdrom filename>.

This function returns 0 on success or -1 on error.

=head2 guestfs_add_drive

 int guestfs_add_drive (guestfs_h *handle,
		const char *filename);

This function adds a virtual machine disk image C<filename> to the
guest.  The first time you call this function, the disk appears as IDE
disk 0 (C</dev/sda>) in the guest, the second time as C</dev/sdb>, and
so on.

You don't necessarily need to be root when using libguestfs.  However
you obviously do need sufficient permissions to access the filename
for whatever operations you want to perform (ie. read access if you
just want to read the image or write access if you want to modify the
image).

This is equivalent to the qemu parameter C<-drive file=filename>.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_close

 int guestfs_aug_close (guestfs_h *handle);

Close the current Augeas handle and free up any resources
used by it.  After calling this, you have to call
C<guestfs_aug_init> again before you can use any other
Augeas functions.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_defnode

 struct guestfs_int_bool *guestfs_aug_defnode (guestfs_h *handle,
		const char *name,
		const char *expr,
		const char *val);

Defines a variable C<name> whose value is the result of
evaluating C<expr>.

If C<expr> evaluates to an empty nodeset, a node is created,
equivalent to calling C<guestfs_aug_set> C<expr>, C<value>.
C<name> will be the nodeset containing that single node.

On success this returns a pair containing the
number of nodes in the nodeset, and a boolean flag
if a node was created.

This function returns a C<struct guestfs_int_bool *>.
I<The caller must call C<guestfs_free_int_bool> after use>.

=head2 guestfs_aug_defvar

 int guestfs_aug_defvar (guestfs_h *handle,
		const char *name,
		const char *expr);

Defines an Augeas variable C<name> whose value is the result
of evaluating C<expr>.  If C<expr> is NULL, then C<name> is
undefined.

On success this returns the number of nodes in C<expr>, or
C<0> if C<expr> evaluates to something which is not a nodeset.

On error this function returns -1.

=head2 guestfs_aug_get

 char *guestfs_aug_get (guestfs_h *handle,
		const char *path);

Look up the value associated with C<path>.  If C<path>
matches exactly one node, the C<value> is returned.

This function returns a string or NULL on error.
I<The caller must free the returned string after use>.

=head2 guestfs_aug_init

 int guestfs_aug_init (guestfs_h *handle,
		const char *root,
		int flags);

Create a new Augeas handle for editing configuration files.
If there was any previous Augeas handle associated with this
guestfs session, then it is closed.

You must call this before using any other C<guestfs_aug_*>
commands.

C<root> is the filesystem root.  C<root> must not be NULL,
use C</> instead.

The flags are the same as the flags defined in
E<lt>augeas.hE<gt>, the logical I<or> of the following
integers:

=over 4

=item C<AUG_SAVE_BACKUP> = 1

Keep the original file with a C<.augsave> extension.

=item C<AUG_SAVE_NEWFILE> = 2

Save changes into a file with extension C<.augnew>, and
do not overwrite original.  Overrides C<AUG_SAVE_BACKUP>.

=item C<AUG_TYPE_CHECK> = 4

Typecheck lenses (can be expensive).

=item C<AUG_NO_STDINC> = 8

Do not use standard load path for modules.

=item C<AUG_SAVE_NOOP> = 16

Make save a no-op, just record what would have been changed.

=item C<AUG_NO_LOAD> = 32

Do not load the tree in C<guestfs_aug_init>.

=back

To close the handle, you can call C<guestfs_aug_close>.

To find out more about Augeas, see L<http://augeas.net/>.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_insert

 int guestfs_aug_insert (guestfs_h *handle,
		const char *path,
		const char *label,
		int before);

Create a new sibling C<label> for C<path>, inserting it into
the tree before or after C<path> (depending on the boolean
flag C<before>).

C<path> must match exactly one existing node in the tree, and
C<label> must be a label, ie. not contain C</>, C<*> or end
with a bracketed index C<[N]>.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_load

 int guestfs_aug_load (guestfs_h *handle);

Load files into the tree.

See C<aug_load> in the Augeas documentation for the full gory
details.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_ls

 char **guestfs_aug_ls (guestfs_h *handle,
		const char *path);

This is just a shortcut for listing C<guestfs_aug_match>
C<path/*> and sorting the resulting nodes into alphabetical order.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_aug_match

 char **guestfs_aug_match (guestfs_h *handle,
		const char *path);

Returns a list of paths which match the path expression C<path>.
The returned paths are sufficiently qualified so that they match
exactly one node in the current tree.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_aug_mv

 int guestfs_aug_mv (guestfs_h *handle,
		const char *src,
		const char *dest);

Move the node C<src> to C<dest>.  C<src> must match exactly
one node.  C<dest> is overwritten if it exists.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_rm

 int guestfs_aug_rm (guestfs_h *handle,
		const char *path);

Remove C<path> and all of its children.

On success this returns the number of entries which were removed.

On error this function returns -1.

=head2 guestfs_aug_save

 int guestfs_aug_save (guestfs_h *handle);

This writes all pending changes to disk.

The flags which were passed to C<guestfs_aug_init> affect exactly
how files are saved.

This function returns 0 on success or -1 on error.

=head2 guestfs_aug_set

 int guestfs_aug_set (guestfs_h *handle,
		const char *path,
		const char *val);

Set the value associated with C<path> to C<value>.

This function returns 0 on success or -1 on error.

=head2 guestfs_cat

 char *guestfs_cat (guestfs_h *handle,
		const char *path);

Return the contents of the file named C<path>.

Note that this function cannot correctly handle binary files
(specifically, files containing C<\0> character which is treated
as end of string).  For those you need to use the C<guestfs_read_file>
function which has a more complex interface.

This function returns a string or NULL on error.
I<The caller must free the returned string after use>.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 guestfs_config

 int guestfs_config (guestfs_h *handle,
		const char *qemuparam,
		const char *qemuvalue);

This can be used to add arbitrary qemu command line parameters
of the form C<-param value>.  Actually it's not quite arbitrary - we
prevent you from setting some parameters which would interfere with
parameters that we use.

The first character of C<param> string must be a C<-> (dash).

C<value> can be NULL.

This function returns 0 on success or -1 on error.

=head2 guestfs_get_autosync

 int guestfs_get_autosync (guestfs_h *handle);

Get the autosync flag.

This function returns a C truth value on success or -1 on error.

=head2 guestfs_get_path

 const char *guestfs_get_path (guestfs_h *handle);

Return the current search path.

This is always non-NULL.  If it wasn't set already, then this will
return the default path.

This function returns a string or NULL on error.
The string is owned by the guest handle and must I<not> be freed.

=head2 guestfs_get_verbose

 int guestfs_get_verbose (guestfs_h *handle);

This returns the verbose messages flag.

This function returns a C truth value on success or -1 on error.

=head2 guestfs_kill_subprocess

 int guestfs_kill_subprocess (guestfs_h *handle);

This kills the qemu subprocess.  You should never need to call this.

This function returns 0 on success or -1 on error.

=head2 guestfs_launch

 int guestfs_launch (guestfs_h *handle);

Internally libguestfs is implemented by running a virtual machine
using L<qemu(1)>.

You should call this after configuring the handle
(eg. adding drives) but before performing any actions.

This function returns 0 on success or -1 on error.

=head2 guestfs_list_devices

 char **guestfs_list_devices (guestfs_h *handle);

List all the block devices.

The full block device names are returned, eg. C</dev/sda>

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_list_partitions

 char **guestfs_list_partitions (guestfs_h *handle);

List all the partitions detected on all block devices.

The full partition device names are returned, eg. C</dev/sda1>

This does not return logical volumes.  For that you will need to
call C<guestfs_lvs>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_ll

 char *guestfs_ll (guestfs_h *handle,
		const char *directory);

List the files in C<directory> (relative to the root directory,
there is no cwd) in the format of 'ls -la'.

This command is mostly useful for interactive sessions.  It
is I<not> intended that you try to parse the output string.

This function returns a string or NULL on error.
I<The caller must free the returned string after use>.

=head2 guestfs_ls

 char **guestfs_ls (guestfs_h *handle,
		const char *directory);

List the files in C<directory> (relative to the root directory,
there is no cwd).  The '.' and '..' entries are not returned, but
hidden files are shown.

This command is mostly useful for interactive sessions.  Programs
should probably use C<guestfs_readdir> instead.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_lvs

 char **guestfs_lvs (guestfs_h *handle);

List all the logical volumes detected.  This is the equivalent
of the L<lvs(8)> command.

This returns a list of the logical volume device names
(eg. C</dev/VolGroup00/LogVol00>).

See also C<guestfs_lvs_full>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_lvs_full

 struct guestfs_lvm_lv_list *guestfs_lvs_full (guestfs_h *handle);

List all the logical volumes detected.  This is the equivalent
of the L<lvs(8)> command.  The "full" version includes all fields.

This function returns a C<struct guestfs_lvm_lv_list *>.
I<The caller must call C<guestfs_free_lvm_lv_list> after use>.

=head2 guestfs_mount

 int guestfs_mount (guestfs_h *handle,
		const char *device,
		const char *mountpoint);

Mount a guest disk at a position in the filesystem.  Block devices
are named C</dev/sda>, C</dev/sdb> and so on, as they were added to
the guest.  If those block devices contain partitions, they will have
the usual names (eg. C</dev/sda1>).  Also LVM C</dev/VG/LV>-style
names can be used.

The rules are the same as for L<mount(2)>:  A filesystem must
first be mounted on C</> before others can be mounted.  Other
filesystems can only be mounted on directories which already
exist.

The mounted filesystem is writable, if we have sufficient permissions
on the underlying device.

The filesystem options C<sync> and C<noatime> are set with this
call, in order to improve reliability.

This function returns 0 on success or -1 on error.

=head2 guestfs_pvs

 char **guestfs_pvs (guestfs_h *handle);

List all the physical volumes detected.  This is the equivalent
of the L<pvs(8)> command.

This returns a list of just the device names that contain
PVs (eg. C</dev/sda2>).

See also C<guestfs_pvs_full>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_pvs_full

 struct guestfs_lvm_pv_list *guestfs_pvs_full (guestfs_h *handle);

List all the physical volumes detected.  This is the equivalent
of the L<pvs(8)> command.  The "full" version includes all fields.

This function returns a C<struct guestfs_lvm_pv_list *>.
I<The caller must call C<guestfs_free_lvm_pv_list> after use>.

=head2 guestfs_read_lines

 char **guestfs_read_lines (guestfs_h *handle,
		const char *path);

Return the contents of the file named C<path>.

The file contents are returned as a list of lines.  Trailing
C<LF> and C<CRLF> character sequences are I<not> returned.

Note that this function cannot correctly handle binary files
(specifically, files containing C<\0> character which is treated
as end of line).  For those you need to use the C<guestfs_read_file>
function which has a more complex interface.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_set_autosync

 int guestfs_set_autosync (guestfs_h *handle,
		int autosync);

If C<autosync> is true, this enables autosync.  Libguestfs will make a
best effort attempt to run C<guestfs_sync> when the handle is closed
(also if the program exits without closing handles).

This function returns 0 on success or -1 on error.

=head2 guestfs_set_path

 int guestfs_set_path (guestfs_h *handle,
		const char *path);

Set the path that libguestfs searches for kernel and initrd.img.

The default is C<$libdir/guestfs> unless overridden by setting
C<LIBGUESTFS_PATH> environment variable.

The string C<path> is stashed in the libguestfs handle, so the caller
must make sure it remains valid for the lifetime of the handle.

Setting C<path> to C<NULL> restores the default path.

This function returns 0 on success or -1 on error.

=head2 guestfs_set_verbose

 int guestfs_set_verbose (guestfs_h *handle,
		int verbose);

If C<verbose> is true, this turns on verbose messages (to C<stderr>).

Verbose messages are disabled unless the environment variable
C<LIBGUESTFS_DEBUG> is defined and set to C<1>.

This function returns 0 on success or -1 on error.

=head2 guestfs_sync

 int guestfs_sync (guestfs_h *handle);

This syncs the disk, so that any writes are flushed through to the
underlying disk image.

You should always call this if you have modified a disk image, before
closing the handle.

This function returns 0 on success or -1 on error.

=head2 guestfs_touch

 int guestfs_touch (guestfs_h *handle,
		const char *path);

Touch acts like the L<touch(1)> command.  It can be used to
update the timestamps on a file, or, if the file does not exist,
to create a new zero-length file.

This function returns 0 on success or -1 on error.

=head2 guestfs_vgs

 char **guestfs_vgs (guestfs_h *handle);

List all the volumes groups detected.  This is the equivalent
of the L<vgs(8)> command.

This returns a list of just the volume group names that were
detected (eg. C<VolGroup00>).

See also C<guestfs_vgs_full>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

=head2 guestfs_vgs_full

 struct guestfs_lvm_vg_list *guestfs_vgs_full (guestfs_h *handle);

List all the volumes groups detected.  This is the equivalent
of the L<vgs(8)> command.  The "full" version includes all fields.

This function returns a C<struct guestfs_lvm_vg_list *>.
I<The caller must call C<guestfs_free_lvm_vg_list> after use>.

=head2 guestfs_wait_ready

 int guestfs_wait_ready (guestfs_h *handle);

Internally libguestfs is implemented by running a virtual machine
using L<qemu(1)>.

You should call this after C<guestfs_launch> to wait for the launch
to complete.

This function returns 0 on success or -1 on error.

